todo:
    implement workspaces

convert layout engine into a trait? use trait object to generate layout?
(this would allow users to define their own special layouts, but would probably cause lifetime issues)

make XConn::poll_for_event blocking? (preserves processing power)

create an elegant way to handle borders
    (can be integrated with handling window gaps)
workspace methods to return error?
multi-screen support (set focused screen, assign workspace to screen, etc)
Implement config and use it
finalise cursor methods
Fullscreen toggling (EWMH and manual)
integrate logging API
implement Debug properly for user-facing types
add hooks to allow users to modfify a client before it is mapped
figure out restarting in-place
hooks on startup, grabbing and managing existing windows
make master a region of windows, instead of one window?
make XCBConn and X11RBConn conversion methods more generic
make keybinds use keysyms and account for modkey state (since some keysyms are only accessible when using modkeys)

tests:
- map window, unmap window
- map master, unmap master
- switching workspaces (preserve layout)
- moving windows between workspaces
- toggling between floating and tiling
    - auto-toggling to floating when moved

cool stuff to add:
- Reading window layout from serialized data
- script or build hook to auto-generate desktop file
- desktop notifications via dbus
- wm transient for, firefox video in picture
- dbus support (for what? idfk lol)

conventions and rules
- pass windows around by their id
use the id to lookup windows, and instead pass references
to their storage structures
(allows you to mutably borrow windows within a single scope)

multi-screen policy:
    when goto_ws is invoked, if workspace is on different screen,
    the cursor is warped to the workspace
    if the workspace is on the same screen, the current workspace
    is deactivated and the new one takes its place
    
    when fullscreen is toggled, the window takes up the entire screen
    but does not intrude into other workspaces

Dynamic tiling:
- Adding windows
    if no windows exist, make new window master
    follow master-slave example
- Removing windows
    remove window, then select new master from windows
    reconfigure window layout